syntax = "proto3";

package dubbo.mesh.v1alpha1;

option go_package = "github.com/apache/dubbo-kubernetes/api/mesh/v1alpha1";

import "api/mesh/v1alpha1/metadata.proto";
import "api/mesh/v1alpha1/mapping.proto";

service MDSSyncService {
  // MappingRegister from dp to cp, data plane register snp information to
  // control plane.
  rpc MappingRegister(MappingRegisterRequest) returns (MappingRegisterResponse);

  rpc MetadataRegister(MetaDataRegisterRequest)
      returns (MetaDataRegisterResponse);

  rpc MetadataSync(stream MetadataSyncRequest)
      returns (stream MetadataSyncResponse);
  // MappingSync from cp to dp, control plane sync snp information to data
  // plane. Only in Kubernetes environment without zk/nacos, this rpc works. In
  // other case (exists zk/nacos), data plane search in zk/nacos.
  //
  // data plane and control plane keep a streaming link:
  // when Mapping Resource updated, control plane sync Mapping Resource to
  // data plane.
  rpc MappingSync(stream MappingSyncRequest)
      returns (stream MappingSyncResponse);
}

message MappingRegisterRequest {
  string namespace = 1;
  string applicationName = 2;
  repeated string interfaceNames = 3;
  string podName = 4;
}

message MappingRegisterResponse {
  bool success = 1;
  string message = 2;
}

message MetaDataRegisterRequest {
  string namespace = 1;
  string podName = 2; // dubbo的应用实例名, 由sdk通过环境变量获取
  MetaData metadata = 3; // 上报的元数据
}

message MetaDataRegisterResponse {
  bool success = 1;
  string message = 2;
}

message MappingSyncRequest {
  string namespace = 1;
  string nonce = 2;
  string interfaceName = 3;
}

message MappingSyncResponse {
  string nonce = 1;
  int64 revision = 2;
  repeated Mapping mappings = 3;
}

// 可以根据应用名和版本号进行获取
message MetadataSyncRequest {
  string namespace = 1;
  string nonce = 2;
  string applicationName = 3;
  string revision = 4;
}

message MetadataSyncResponse {
  string nonce = 1;
  int64 revision = 2;
  repeated MetaData metaDatum = 3;
}
