// Licensed to the Apache Software Foundation (ASF) under one or more
// contributor license agreements.  See the NOTICE file distributed with
// this work for additional information regarding copyright ownership.
// The ASF licenses this file to You under the Apache License, Version 2.0
// the "License"); you may not use this file except in compliance with
// the License.  You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto2";
package pkg;
import "options.proto";

option (UsedOption.file_foo).foo = "str";
option (UsedOption.file_baz) = "str";

message Foo {
	option (message_foo).foo = "str";
	option (message_baz) = "str";

	optional string foo = 1 [
		(field_foo).foo = "str",
		(field_baz) = "str",
		jstype = JS_STRING
	];

	oneof testOneof {
		option (oneof_foo).foo = "str";
		option (oneof_baz) = "str";

		string bar = 2;
		bytes baz = 3;
	}

	extensions 10 to max;
}

enum FooEnum {
	option (enum_foo).foo = "str";
	option (enum_baz) = "str";
	option deprecated = true;
	
	FOO_ENUM_X = 0;
	FOO_ENUM_Y = 1 [
		(enum_value_foo).foo = "str",
		(enum_value_baz) = "str"
	];
}

message Empty{}

service FooService {
	option (service_foo).foo = "str";
	option (service_baz) = "str";

	rpc Do(Empty) returns (Empty) {
		option (method_foo).foo = "str";
		option (method_baz) = "str";
	};

	rpc DoNot(Empty) returns (Empty) {
		option (method_foo).foo = "str";
		option (method_baz) = "str";
	};
}

extend Foo {
	optional string extension = 11 [
		(field_foo).foo = "str",
		(field_baz) = "str"
	];
}
